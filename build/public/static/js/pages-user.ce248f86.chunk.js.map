{"version":3,"sources":["webpack:///./src/components/Query.jsx","webpack:///./src/pages/user/index.jsx","webpack:///./src/components/PostLike.jsx","webpack:///./src/components/PostItem.jsx","webpack:///./src/lib/date.js","webpack:///./src/pages/search/SearchCategoryPage.jsx","webpack:///./src/components/Meta.jsx","webpack:///./src/components/Scroll.jsx","webpack:///./src/lib/fetch.js","webpack:///./src/components/List.jsx","webpack:///./src/pages/search/SearchPostPage.jsx","webpack:///./src/graphql/query/post.js"],"names":["CommonQuery","children","props","loading","error","data","fetchMore","client","User","id","match","params","useState","order","setOrder","handleChangeOrder","useCallback","e","target","value","className","onChange","title","searchOptions","sort","filter","enable","map","text","key","type","query","GET_POSTS","variables","limit","userId","fetchMoreType","Item","PostItem","PostLike","likers","isShowCount","dispatch","useDispatch","useSelector","useMutation","LIKE_POST","like","UNLIKE_POST","unlike","isLike","setIsLike","length","likeCount","setLikeCount","handleClick","a","getStorage","TOKEN_KEY","SHOW_LOGIN_MODAL","willIsLike","willLikeCount","graphqlError","useEffect","some","liker","onClick","aria-label","tabIndex","toLocaleString","createdAt","category","content","Likers","mdBodyEl","useRef","setLoading","imgs","current","querySelectorAll","forEach","img","idx","obj","Image","src","onload","width","this","height","wrapper","parentNode","classList","add","style","paddingBottom","Avatar","avatar","size","nickname","color","visible","ref","dangerouslySetInnerHTML","__html","marked","to","today","Date","timeValue","betweenTime","Math","floor","getTime","betweenTimeHour","betweenTimeDay","betweenTimeWeek","betweenTimeMonth","timeForToday","memo","SearchCategoryPage","Meta","description","name","Scroll","onBottom","$main","document","querySelector","scrollHeight","clientHeight","scrollTop","disabledEvent","activeEvent","addEventListener","handleScroll","removeEventListener","Component","handleFetchMore","callback","updateQuery","prev","next","fetchMoreResult","rows","count","List","Query","len","row","offset","SearchPostPage","searchKeyword","gql"],"mappings":"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","file":"static/js/pages-user.ce248f86.chunk.js","sourcesContent":["import React from \"react\";\nimport { Query } from \"@apollo/react-components\";\nimport Loader from \"./Loader\";\n\n/**\n * * 공통 요청 쿼리 컴포넌트\n *\n * @Component\n * @author firsk\n */\nconst CommonQuery = ({ children, ...props }) => {\n    return (\n        <Query {...props}>\n            {({ loading, error, data, fetchMore, client }) => {\n                if (error) {\n                    return `Error!: ${error}`;\n                }\n\n                if (!data) {\n                    return <Loader />;\n                }\n\n                return children({\n                    data,\n                    loading,\n                    fetchMore,\n                    client\n                });\n            }}\n        </Query>\n    );\n};\n\nexport default CommonQuery;\n","import React, { useState, useCallback } from \"react\";\nimport { GET_POSTS } from \"../../graphql/query/post\";\nimport { Select } from \"../../components/Form\";\nimport searchOptions from \"../../json/search_options.json\";\nimport List from \"../../components/List\";\nimport PostItem from \"../../components/PostItem\";\n\n/**\n * 사용자 화면 컴포넌트\n *\n */\nconst User = ({\n    match: {\n        params: { id }\n    }\n}) => {\n    // 정렬\n    const [order, setOrder] = useState(\"createdAt_DESC\");\n    // 정렬 변경 핸들러\n    const handleChangeOrder = useCallback((e) => {\n        setOrder(e.target.value);\n    }, []);\n\n    return (\n        <>\n            <div className=\"fr-main__title\">\n                <span>내 포스트</span>\n                <div>\n                    <Select\n                        value={order}\n                        onChange={handleChangeOrder}\n                        title=\"정렬\"\n                    >\n                        {searchOptions.sort\n                            .filter(({ enable }) => enable === true)\n                            .map(({ text, value, id }) => (\n                                <option value={value} key={id}>\n                                    {text}\n                                </option>\n                            ))}\n                    </Select>\n                </div>\n            </div>\n            <List\n                type=\"posts\"\n                query={GET_POSTS}\n                variables={{\n                    limit: 12,\n                    order,\n                    userId: id\n                }}\n                fetchMoreType=\"scroll\"\n                Item={PostItem}\n            />\n        </>\n    );\n};\n\nexport default User;\n","import React, { useState, useCallback, useEffect } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport { HeartFull, HeartEmpty } from \"../assets/icon\";\nimport { LIKE_POST, UNLIKE_POST } from \"../graphql/mutation/post\";\nimport { graphqlError } from \"../lib/error\";\nimport { useDispatch, useSelector } from \"../context\";\nimport { getStorage, TOKEN_KEY } from \"../lib/cookie\";\nimport { SHOW_LOGIN_MODAL } from \"../context/action\";\n\n/**\n * 좋아요 버튼 컴포넌트\n *\n * @param {string}   props.id          게시물 ID\n * @param {object[]} props.likers      좋아요 누른 명단\n * @param {object[]} props.isShowCount 좋아요 수 보여줄 지 여부\n * @deprecated {object}   props.style       아이콘 스타일\n */\nconst PostLike = ({ id, likers, isShowCount }) => {\n    const dispatch = useDispatch();\n\n    const { id: userId } = useSelector();\n    // 좋아요 mutation\n    const [like] = useMutation(LIKE_POST);\n    // 좋아요 취소 mutation\n    const [unlike] = useMutation(UNLIKE_POST);\n    // 좋아요 여부 상태\n    const [isLike, setIsLike] = useState(false);\n    // 좋아요 수 상태, -1: 비활성화\n    const [likeCount, setLikeCount] = useState(likers.length);\n    // 클릭 핸들러\n    const handleClick = useCallback(async () => {\n        // 로그인 체크\n        const token = getStorage(TOKEN_KEY);\n\n        if (token === null) {\n            return dispatch({\n                type: SHOW_LOGIN_MODAL\n            });\n        }\n\n        try {\n            let willIsLike;\n            let willLikeCount;\n\n            if (isLike) {\n                await unlike({\n                    variables: { id }\n                });\n                willIsLike = false;\n\n                willLikeCount = likeCount - 1;\n            } else {\n                await like({\n                    variables: { id }\n                });\n\n                willIsLike = true;\n\n                willLikeCount = likeCount + 1;\n            }\n            // 좋아요 여부 업데이트\n            setIsLike(willIsLike);\n            // 좋아요 수 업데이트\n            setLikeCount(willLikeCount);\n        } catch (error) {\n            graphqlError({ error, dispatch });\n        }\n    }, [isLike, likeCount]);\n\n    useEffect(() => {\n        setIsLike(likers.some((liker) => liker.id == userId));\n    }, [userId]);\n\n    return (\n        <div className=\"fr-like\">\n            <button onClick={handleClick} aria-label=\"좋아요\">\n                <span tabIndex=\"-1\">\n                    {isLike ? <HeartFull /> : <HeartEmpty />}\n                </span>\n\n                <span className=\"a11y-hidden\">\n                    {isLike ? \"좋아요 취소하기\" : \"좋아요 하기\"}\n                </span>\n            </button>\n            <div className=\"fr-like__count\">\n                {isShowCount && <span>{likeCount.toLocaleString()}</span>}\n            </div>\n        </div>\n    );\n};\n\nexport default PostLike;\n","import React, { useEffect, useRef, useState, memo } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Avatar from \"./Avatar\";\nimport { timeForToday } from \"../lib/date\";\nimport PostLike from \"./PostLike\";\nimport { marked } from \"marked\";\nimport Spinner from \"react-loader-spinner\";\n// import { DropdownBtn } from \"./Dropdown\";\n// import { useSelector } from \"../context\";\n\n/**\n * 게시물 컴포넌트\n *\n * @param {string} props.id           게시물 ID\n * @param {string} props.title        게시물 제목\n * @param {string} props.description  게시물 설명\n * @param {object} props.User         게시물 작성자\n * @param {string} props.createdAt    게시물 작성일\n * @param {number} props.viewCount    게시물 조회수\n * @param {string} props.category     게시물 카테고리\n * @param {string} props.thumbnail    게시물 썸네일\n * @param {string} props.Likers       게시물 좋아요 목록\n * @param {string} props.PostComments 게시물 댓글\n */\nconst PostItem = ({ id, User, createdAt, category, content, Likers }) => {\n    const displayName = \"fr-post\";\n\n    // const { id: userId } = useSelector();\n\n    const mdBodyEl = useRef(null);\n    // 이미지 로딩 여부\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        const imgs = mdBodyEl.current.querySelectorAll(\"img\");\n        // 이미지가 없는 게시물인 경우\n        if (imgs.length === 0) {\n            setLoading(false);\n        }\n        // 이미지 리사이징\n        imgs.forEach((img, idx) => {\n            const obj = new Image();\n\n            obj.src = img.src;\n\n            obj.onload = function () {\n                const width = this.width;\n\n                const height = this.height;\n\n                const wrapper = img.parentNode;\n\n                wrapper.classList.add(\"fr-thumbnail\");\n\n                wrapper.style.paddingBottom = `calc(${height / width} * 100%)`;\n\n                img.classList.add(\"fr-thumbnail__image\");\n\n                if (idx === imgs.length - 1) {\n                    setLoading(false);\n                }\n            };\n        });\n    }, []);\n\n    return (\n        <div className={`${displayName}__wrapper`}>\n            <article className={displayName}>\n                <header className={`${displayName}__header`}>\n                    <div\n                        className={`${displayName}__avatar`}\n                        aria-label=\"avatar\"\n                    >\n                        <Avatar src={User.avatar} size={38} userId={User.id} />\n                    </div>\n                    <div className={`${displayName}__user`}>\n                        <span className={`${displayName}__username`}>\n                            {User.nickname}\n                        </span>\n                    </div>\n                    {/* {userId == User.id && <DropdownBtn />} */}\n                </header>\n                <div\n                    className={`${displayName}__body ${displayName}__body--expended`}\n                >\n                    {loading && (\n                        <div className={`${displayName}__skeleton`}>\n                            <Spinner\n                                type=\"ThreeDots\"\n                                color=\"#4142DD\"\n                                height={80}\n                                width={80}\n                                visible={true}\n                            />\n                        </div>\n                    )}\n\n                    <div\n                        ref={mdBodyEl}\n                        className=\"markdown-body\"\n                        dangerouslySetInnerHTML={{\n                            __html: content ? marked(content) : \"\"\n                        }}\n                    />\n                    {/* {!expension && (\n                        <div className={`${displayName}__expansion`}>\n                            <button onClick={handleClick}>더보기</button>\n                        </div>\n                    )} */}\n                </div>\n                <footer className={`${displayName}__footer`}>\n                    {category && (\n                        <div className={`${displayName}__tag`}>\n                            <Link to={`/category/${category}`}>\n                                #{category}\n                            </Link>\n                        </div>\n                    )}\n\n                    <div className={`${displayName}__more`}>\n                        <div>\n                            <PostLike\n                                id={id}\n                                likers={Likers}\n                                isShowCount={true}\n                            />\n                        </div>\n                        <div>{timeForToday(createdAt)}</div>\n                    </div>\n                </footer>\n            </article>\n        </div>\n    );\n};\n\nexport default memo(PostItem);\n","/**\n * Date => Str\n *\n * @param {Date} value\n */\nexport const timeForToday = (value) => {\n    const today = new Date();\n    const timeValue = new Date(value);\n\n    const betweenTime = Math.floor(\n        (today.getTime() - timeValue.getTime()) / 1000 / 60\n    );\n    if (betweenTime < 1) return \"방금 전\";\n    if (betweenTime < 60) {\n        return `${betweenTime}분 전`;\n    }\n\n    const betweenTimeHour = Math.floor(betweenTime / 60);\n    if (betweenTimeHour < 24) {\n        return `${betweenTimeHour}시간 전`;\n    }\n\n    const betweenTimeDay = Math.floor(betweenTime / 60 / 24);\n    if (betweenTimeDay < 31) {\n        return `${betweenTimeDay}일 전`;\n    }\n\n    const betweenTimeWeek = Math.floor(betweenTime / 60 / 24 / 7);\n    if (betweenTimeWeek < 5) {\n        return `${betweenTimeWeek}주 전`;\n    }\n\n    const betweenTimeMonth = Math.floor(betweenTime / 60 / 24 / 7 / 12);\n    if (betweenTimeMonth < 13) {\n        return `${betweenTimeMonth}개월 전`;\n    }\n\n    return `${Math.floor(betweenTimeDay / 365)}년 전`;\n};\n","import React, { useState, useCallback } from \"react\";\nimport Meta from \"../../components/Meta\";\nimport { Select } from \"../../components/Form\";\nimport searchOptions from \"../../json/search_options.json\";\nimport List from \"../../components/List\";\nimport { GET_POSTS } from \"../../graphql/query/post\";\nimport PostItem from \"../../components/PostItem\";\n\n/**\n * 카테고리 검색 화면 컴포넌트\n *\n */\nconst SearchCategoryPage = ({\n    match: {\n        params: { content }\n    }\n}) => {\n    // 정렬\n    const [order, setOrder] = useState(\"createdAt_DESC\");\n    // 정렬 변경 핸들러\n    const handleChangeOrder = useCallback((e) => {\n        setOrder(e.target.value);\n    }, []);\n\n    return (\n        <>\n            <Meta title={`Frisklog - #${content}`} />\n            <div className=\"fr-main__title\">\n                <span>#{content} 검색결과</span>\n                <div>\n                    <Select\n                        value={order}\n                        onChange={handleChangeOrder}\n                        title=\"정렬\"\n                    >\n                        {searchOptions.sort\n                            .filter(({ enable }) => enable === true)\n                            .map(({ text, value, id }) => (\n                                <option value={value} key={id}>\n                                    {text}\n                                </option>\n                            ))}\n                    </Select>\n                </div>\n            </div>\n            <List\n                type=\"posts\"\n                query={GET_POSTS}\n                variables={{\n                    limit: 12,\n                    order,\n                    category: content\n                }}\n                fetchMoreType=\"scroll\"\n                Item={PostItem}\n            />\n        </>\n    );\n};\n\nexport default SearchCategoryPage;\n","import React from \"react\";\nimport { Helmet } from \"react-helmet\";\n\n/**\n * * 검색엔진 최적화를 위한 메타 컴포넌트\n *\n * @Component\n * @author frisk\n * @param props.title Head title\n */\nconst Meta = ({ title, description }) => (\n    <Helmet>\n        <title>{title || \"Frisklog\"}</title>\n        <meta\n            name=\"description\"\n            content={description || \"Blog made by frisk\"}\n        />\n        <meta name=\"twitter:title\" content={title || \"Frisklog\"} />\n        <meta\n            name=\"twitter:description\"\n            content={description || \"Blog made by frisk\"}\n        />\n        <meta name=\"twitter:image:alt\" content=\"frisklog\" />\n    </Helmet>\n);\n\nexport default Meta;\n","import { Component } from \"react\";\n\n/**\n * 스크롤 이벤트 컴포넌트\n *\n * @param {function} props.onBottom  조건부 실행 함수\n */\nclass Scroll extends Component {\n    handleScroll = () => {\n        const { onBottom } = this.props;\n\n        const $main = document.querySelector(\"#main\");\n\n        const { scrollHeight, clientHeight, scrollTop } = $main;\n\n        if (scrollTop + clientHeight > scrollHeight - 600) {\n            this.disabledEvent();\n\n            onBottom(this.activeEvent);\n        }\n    };\n\n    activeEvent = () => {\n        const $main = document.querySelector(\"#main\");\n\n        $main.addEventListener(\"scroll\", this.handleScroll);\n    };\n\n    disabledEvent = () => {\n        const $main = document.querySelector(\"#main\");\n\n        $main.removeEventListener(\"scroll\", this.handleScroll);\n    };\n\n    componentDidMount() {\n        this.activeEvent();\n    }\n\n    componentWillUnmount() {\n        this.disabledEvent();\n    }\n\n    render() {\n        return null;\n    }\n}\n\nexport default Scroll;\n","/**\n * Custom fetch more\n *\n * @param  {function}               fetchMore\n * @param  {object}                 variables\n * @param  {string}                 type\n * @return {(function) => function}\n */\nexport const handleFetchMore = ({ fetchMore, variables, type }) => (callback) =>\n    fetchMore({\n        variables,\n        updateQuery: (prev, next) => {\n            const { fetchMoreResult } = next;\n\n            if (!fetchMoreResult || fetchMoreResult[type].rows.length === 0) {\n                return prev;\n            }\n\n            callback();\n\n            return {\n                [type]: {\n                    rows: [...prev[type].rows, ...fetchMoreResult[type].rows],\n                    count: prev[type].count\n                }\n            };\n        }\n    });\n","import React from \"react\";\nimport Query from \"./Query\";\nimport Scroll from \"./Scroll\";\nimport { handleFetchMore } from \"../lib/fetch\";\n\n/**\n * 공통 리스트 렌더링 컴포넌트\n *\n * @param {string}          type          데이터 키\n * @param {string}          query         요청 쿼리\n * @param {object}          variables     요청 쿼리 파라미터\n * @param {string}          fetchMoreType @enum scroll | button\n * @param {React.Component} Item          렌더링 컴포넌트\n */\nconst List = ({ type, query, variables, fetchMoreType, Item }) => (\n    <Query query={query} variables={variables}>\n        {({ data, fetchMore }) => {\n            const { rows, count } = data[type];\n\n            const len = rows.length;\n\n            if (len === 0) {\n                return \"no data\";\n            }\n\n            return (\n                <>\n                    {rows.map((row) => (\n                        <Item key={type + row.id} {...row} />\n                    ))}\n\n                    {len < count &&\n                        ((fetchMoreType === \"scroll\" && (\n                            <Scroll\n                                onBottom={handleFetchMore({\n                                    fetchMore,\n                                    variables: {\n                                        ...variables,\n                                        offset: len\n                                    },\n                                    type\n                                })}\n                            />\n                        )) ||\n                            (fetchMoreType === \"button\" && null))}\n                </>\n            );\n        }}\n    </Query>\n);\n\nexport default List;\n","import React, { useState, useCallback } from \"react\";\nimport Meta from \"../../components/Meta\";\nimport { Select } from \"../../components/Form\";\nimport searchOptions from \"../../json/search_options.json\";\nimport List from \"../../components/List\";\nimport { GET_POSTS } from \"../../graphql/query/post\";\nimport PostItem from \"../../components/PostItem\";\n\n/**\n * 포스트 검색 화면 컴포넌트\n *\n */\nconst SearchPostPage = ({\n    match: {\n        params: { query }\n    }\n}) => {\n    // 정렬\n    const [order, setOrder] = useState(\"createdAt_DESC\");\n    // 정렬 변경 핸들러\n    const handleChangeOrder = useCallback((e) => {\n        setOrder(e.target.value);\n    }, []);\n\n    return (\n        <>\n            <Meta title={`Frisklog - ${query}`} />\n            <div className=\"fr-main__title\">\n                <span>&quot;{query}&quot; 검색결과</span>\n                <div>\n                    <Select\n                        value={order}\n                        onChange={handleChangeOrder}\n                        title=\"정렬\"\n                    >\n                        {searchOptions.sort\n                            .filter(({ enable }) => enable === true)\n                            .map(({ text, value, id }) => (\n                                <option value={value} key={id}>\n                                    {text}\n                                </option>\n                            ))}\n                    </Select>\n                </div>\n            </div>\n            <List\n                type=\"posts\"\n                query={GET_POSTS}\n                variables={{\n                    limit: 12,\n                    order,\n                    searchKeyword: query\n                }}\n                fetchMoreType=\"scroll\"\n                Item={PostItem}\n            />\n        </>\n    );\n};\n\nexport default SearchPostPage;\n","import { gql } from \"@apollo/client\";\n\n/**\n * 게시물 검색\n *\n * @param $offset         건너뛸 목록의 수\n * @param $limit          요청 목록의 수\n * @param $order          정렬\n * @param $searchKeyword  검색어\n * @param $category       카테고리\n * @param $userId         사용자 ID\n * @deprecated $isThereThumb   썸네일 있는지 여부\n */\nexport const GET_POSTS = gql`\n    query GetPosts(\n        $offset: Int\n        $limit: Int!\n        $order: String\n        $searchKeyword: String\n        $category: String\n        $userId: String\n    ) # $isThereThumb: Boolean\n    {\n        posts(\n            offset: $offset\n            limit: $limit\n            order: $order\n            searchKeyword: $searchKeyword\n            category: $category\n            userId: $userId\n        ) # isThereThumb: $isThereThumb\n        {\n            rows {\n                id\n                # title\n                # description\n                content\n                # viewCount\n                category\n                # thumbnail\n                User {\n                    id\n                    nickname\n                    avatar\n                }\n                Likers {\n                    id\n                }\n                createdAt\n                updatedAt\n            }\n            count\n        }\n    }\n`;\n\n/**\n * 게시물 상세 로드\n *\n * @param $id 건너뛸 목록의 수\n */\nexport const GET_POST = gql`\n    query GetPost($id: String!) {\n        post(id: $id) {\n            id\n            # title\n            # description\n            content\n            # viewCount\n            category\n            # thumbnail\n            User {\n                id\n                nickname\n                avatar\n            }\n            Likers {\n                id\n            }\n            createdAt\n            updatedAt\n        }\n    }\n`;\n"],"sourceRoot":""}