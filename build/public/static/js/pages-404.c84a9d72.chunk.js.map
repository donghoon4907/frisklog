{"version":3,"sources":["webpack:///./src/components/Query.jsx","webpack:///./src/components/button/Logout.jsx","webpack:///./src/components/aside/Mypage.jsx","webpack:///./src/components/button/BtnLink.jsx","webpack:///./src/pages/404/index.jsx","webpack:///./src/components/Meta.jsx","webpack:///./src/graphql/query/user.js"],"names":["CommonQuery","children","props","loading","error","data","fetchMore","client","LogoutBtn","dispatch","useDispatch","handleClick","useCallback","getStorage","TOKEN_KEY","window","confirm","deleteStorage","type","SET_ME","id","nickname","email","avatar","isMaster","SHOW_LOGIN_MODAL","onClick","AsideMypage","match","params","userId","useSelector","Query","query","GET_USER","variables","user","Meta","title","className","style","backgroundImage","process","Logout","BtnLink","to","ErrorPage","description","name","content","gql","GET_RECOMMENDERS"],"mappings":"+LAiCeA,IAvBK,SAAC,GAA2B,IAAzBC,EAAyB,EAAzBA,SAAaC,EAAY,oBAC5C,OACI,kBAAC,QAAUA,GACN,YAAiD,IAA9CC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,KAAMC,EAAwB,EAAxBA,UAAWC,EAAa,EAAbA,OACjC,OAAIH,EACA,kBAAkBA,GAGjBC,EAIEJ,EAAS,CACZI,OACAF,UACAG,YACAC,WAPO,kBAAC,IAAD,W,sJC0BZC,EAnCG,WAEd,IAAMC,EAAWC,cAEXC,EAAcC,uBAAY,WAEdC,YAAWC,KAGVC,OAAOC,QAAQ,8DAItBC,YAAcH,KAEdL,EAAS,CACLS,KAAMC,IACNC,GAAI,KACJC,SAAU,KACVC,MAAO,KACPC,OAAQ,KACRC,UAAU,KAKlBf,EAAS,CACLS,KAAMO,QAGf,IAEH,OAAO,kBAAC,IAAD,CAAQC,QAASf,GAAjB,6BCyBIgB,UAtDK,SAAC,GAIf,IAFYP,EAEZ,EAHFQ,MACIC,OAAUT,GAKFU,EAAWC,cAAfX,GAER,OACI,kBAACY,EAAA,EAAD,CACIC,MAAOC,IACPC,UAAW,CACPf,QAGH,gBAAWgB,EAAX,EAAG/B,KAAQ+B,KAAX,OACG,oCACI,kBAACC,EAAA,EAAD,CAAMC,MAAK,qBAAgBF,EAAKf,YAChC,yBAAKkB,UAAS,UAdV,YAcU,cACV,yBAAKA,UAfL,aAgBI,yBAAKA,UAAS,UAhBlB,YAgBkB,aACV,yBACIA,UAAS,UAlBrB,YAkBqB,YACTC,MAAO,CACHC,gBAAiB,+OAAF,OAKXC,8BACCN,EAAKb,QACFmB,cAPO,SAa3B,yBAAKH,UAAS,UAjClB,YAiCkB,WACV,yBAAKA,UAAU,mBACVH,EAAKf,UAEV,yBAAKkB,UAAS,UArCtB,YAqCsB,aACTT,GAAUV,GAAM,kBAACuB,EAAD,gB,0FC3CtCC,EALC,SAAC,GAAD,IAAGC,EAAH,EAAGA,GAAI5C,EAAP,EAAOA,SAAP,OACZ,kBAAC,IAAD,CAAM4C,GAAIA,EAAIN,UAAU,kBACnBtC,ICmBM6C,UApBG,WAGd,OACI,yBAAKP,UAHW,UAIZ,kBAACF,EAAA,EAAD,CACIC,MAAM,yEACNS,YAAY,kCAEhB,yBAAKR,UAAS,UARF,SAQE,WACV,sGACA,uBAAGA,UAAS,UAVJ,SAUI,kBAAZ,kBACA,yBAAKA,UAAS,UAXN,SAWM,aACV,kBAAC,EAAD,CAASM,GAAG,KAAZ,iC,kCCtBpB,qCA0BeR,IAhBF,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOS,EAAV,EAAUA,YAAV,OACT,kBAAC,IAAD,KACI,+BAAQT,GAAS,YACjB,0BACIU,KAAK,cACLC,QAASF,GAAe,uBAE5B,0BAAMC,KAAK,gBAAgBC,QAASX,GAAS,aAC7C,0BACIU,KAAK,sBACLC,QAASF,GAAe,uBAE5B,0BAAMC,KAAK,oBAAoBC,QAAQ,gB,siDCbtBC,cAAH,KAAf,IA2BMC,EAAmBD,cAAH,KAgBhBhB,EAAWgB,cAAH,KAuBHA,cAAH","file":"static/js/pages-404.c84a9d72.chunk.js","sourcesContent":["import React from \"react\";\nimport { Query } from \"@apollo/react-components\";\nimport Loader from \"./Loader\";\n\n/**\n * * 공통 요청 쿼리 컴포넌트\n *\n * @Component\n * @author firsk\n */\nconst CommonQuery = ({ children, ...props }) => {\n    return (\n        <Query {...props}>\n            {({ loading, error, data, fetchMore, client }) => {\n                if (error) {\n                    return `Error!: ${error}`;\n                }\n\n                if (!data) {\n                    return <Loader />;\n                }\n\n                return children({\n                    data,\n                    loading,\n                    fetchMore,\n                    client\n                });\n            }}\n        </Query>\n    );\n};\n\nexport default CommonQuery;\n","import React, { useCallback } from \"react\";\nimport { useDispatch } from \"../../context\";\nimport { SHOW_LOGIN_MODAL, SET_ME } from \"../../context/action\";\nimport { TOKEN_KEY, getStorage, deleteStorage } from \"../../lib/cookie\";\nimport Button from \".\";\n\n/**\n * 로그아웃 버튼 컴포넌트\n *\n */\nconst LogoutBtn = () => {\n    // Dispatch hooks\n    const dispatch = useDispatch();\n    // 클릭 핸들러\n    const handleClick = useCallback(() => {\n        // 토큰 가져오기\n        const token = getStorage(TOKEN_KEY);\n\n        if (token) {\n            const tf = window.confirm(\"로그아웃 하시겠어요?\");\n\n            if (tf) {\n                // 토큰 삭제\n                deleteStorage(TOKEN_KEY);\n                // 로컬 상태 갱신\n                dispatch({\n                    type: SET_ME,\n                    id: null,\n                    nickname: null,\n                    email: null,\n                    avatar: null,\n                    isMaster: false\n                });\n            }\n        } else {\n            // 로그인 모달 보이기\n            dispatch({\n                type: SHOW_LOGIN_MODAL\n            });\n        }\n    }, []);\n\n    return <Button onClick={handleClick}>로그아웃</Button>;\n};\n\nexport default LogoutBtn;\n","import React from \"react\";\n// import Button from \"../button\";\nimport Meta from \"../Meta\";\nimport Query from \"../Query\";\nimport { GET_USER } from \"../../graphql/query/user\";\nimport LogoutBtn from \"../button/Logout\";\nimport { useSelector } from \"../../context\";\n\n/**\n * 사용자정보 컴포넌트\n *\n * @param {object} props.match\n */\nconst AsideMypage = ({\n    match: {\n        params: { id }\n    }\n}) => {\n    const displayName = \"fr-mypage\";\n\n    const { id: userId } = useSelector();\n\n    return (\n        <Query\n            query={GET_USER}\n            variables={{\n                id\n            }}\n        >\n            {({ data: { user } }) => (\n                <>\n                    <Meta title={`Frisklog - ${user.nickname}`} />\n                    <div className={`${displayName}__wrapper`}>\n                        <div className={displayName}>\n                            <div className={`${displayName}__header`}>\n                                <div\n                                    className={`${displayName}__avatar`}\n                                    style={{\n                                        backgroundImage: `\n                                        linear-gradient(\n                                            rgba(0, 0, 0, 0), \n                                            rgba(0, 0, 0, 0.15)\n                                        ), url(${\n                                            process.env.RAZZLE_BACKEND_ROOT +\n                                            (user.avatar ||\n                                                process.env\n                                                    .RAZZLE_DEFAULT_AVATAR)\n                                        })`\n                                    }}\n                                ></div>\n                            </div>\n                            <div className={`${displayName}__body`}>\n                                <div className=\"fr-avatar__name\">\n                                    {user.nickname}\n                                </div>\n                                <div className={`${displayName}__helper`}>\n                                    {userId == id && <LogoutBtn />}\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </>\n            )}\n        </Query>\n    );\n};\n\nexport default AsideMypage;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\n/**\n * 공통 버튼 링크 컴포넌트\n *\n * @param props.to 이동할 url\n */\nconst BtnLink = ({ to, children }) => (\n    <Link to={to} className=\"fr-btn fr-link\">\n        {children}\n    </Link>\n);\nexport default BtnLink;\n","import React from \"react\";\nimport Meta from \"../../components/Meta\";\nimport BtnLink from \"../../components/button/BtnLink\";\n\n/**\n * * 404 화면 컴포넌트\n *\n * @author frist\n */\nconst ErrorPage = () => {\n    const displayName = \"fr-404\";\n\n    return (\n        <div className={displayName}>\n            <Meta\n                title=\"페이지를 찾을 수 없습니다.\"\n                description=\"page is not found in frisklog\"\n            />\n            <div className={`${displayName}__body`}>\n                <h1>페이지를 찾을 수 없습니다.</h1>\n                <p className={`${displayName}__description`}>404, Not Found</p>\n                <div className={`${displayName}__submit`}>\n                    <BtnLink to=\"/\">돌아가기</BtnLink>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default ErrorPage;\n","import React from \"react\";\nimport { Helmet } from \"react-helmet\";\n\n/**\n * * 검색엔진 최적화를 위한 메타 컴포넌트\n *\n * @Component\n * @author frisk\n * @param props.title Head title\n */\nconst Meta = ({ title, description }) => (\n    <Helmet>\n        <title>{title || \"Frisklog\"}</title>\n        <meta\n            name=\"description\"\n            content={description || \"Blog made by frisk\"}\n        />\n        <meta name=\"twitter:title\" content={title || \"Frisklog\"} />\n        <meta\n            name=\"twitter:description\"\n            content={description || \"Blog made by frisk\"}\n        />\n        <meta name=\"twitter:image:alt\" content=\"frisklog\" />\n    </Helmet>\n);\n\nexport default Meta;\n","import { gql } from \"@apollo/client\";\n\n/**\n * 사용자 검색\n *\n * @param $offset 건너뛸 목록의 수\n * @param $limit  요청 목록의 수\n * @param $order  정렬\n */\nexport const GET_USERS = gql`\n    query GetUsers($offset: Int, $limit: Int!, $order: String) {\n        users(offset: $offset, limit: $limit, order: $order) {\n            rows {\n                id\n                nickname\n                email\n                avatar\n                isMaster\n                Posts {\n                    id\n                }\n                createdAt\n                updatedAt\n            }\n            count\n        }\n    }\n`;\n\n/**\n * 추천인 검색\n *\n * @param $offset 건너뛸 목록의 수\n * @param $limit  요청 목록의 수\n * @param $order  정렬\n */\nexport const GET_RECOMMENDERS = gql`\n    query GetRecommenders($offset: Int, $limit: Int!) {\n        recommenders(offset: $offset, limit: $limit) {\n            id\n            nickname\n            avatar\n            PostCount\n        }\n    }\n`;\n\n/**\n * 사용자 상세 조회\n *\n * @param $id 사용자 ID\n */\nexport const GET_USER = gql`\n    query GetUser($id: String!) {\n        user(id: $id) {\n            id\n            nickname\n            email\n            avatar\n            isMaster\n            Posts {\n                id\n            }\n            createdAt\n            updatedAt\n        }\n    }\n`;\n\n/**\n * 내 정보\n *\n * @query\n * @author frisk\n */\nexport const ME = gql`\n    query Me {\n        me {\n            id\n            nickname\n            email\n            avatar\n            isMaster\n            Posts {\n                id\n            }\n            createdAt\n            updatedAt\n        }\n    }\n`;\n"],"sourceRoot":""}